{"version":3,"file":"static/js/257.ace9745d.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","services/API.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const NavLinkStyled = styled(NavLink)`\n  text-decoration: none;\n  font-weight: 500;\n`;\n\nexport const DivDetailsCard = styled.div`\n  display: flex;\n  margin-top: 10px;\n`;\nexport const DivDetailsInfo = styled.div`\n  display: block;\n  margin-left: 20px;\n  border-bottom: 1px solid black;\n`;\n","import { useParams, useLocation, Outlet, NavLink } from 'react-router-dom';\nimport { useState, useEffect, Suspense } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getMovieDetails } from 'services/API';\nimport {\n  NavLinkStyled,\n  DivDetailsCard,\n  DivDetailsInfo,\n} from './MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [details, setDetails] = useState(null);\n  const srcImgBase = 'https://image.tmdb.org/t/p/w300';\n  const noImage = '/uc4RAVW1T3T29h6OQdr7zu4Blui.jpg';\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    async function getDetailsById(movieId) {\n      try {\n        const data = await getMovieDetails(movieId);\n        setDetails(data);\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n    getDetailsById(movieId);\n  }, [movieId]);\n\n  console.log(location.state?.from);\n\n  return (\n    <div>\n      {details && (\n        <>\n          <NavLinkStyled to={backLinkHref}> &#8592; Go back</NavLinkStyled>\n          <DivDetailsCard>\n            {details.poster_path === null ? (\n              <img src={`${srcImgBase}${noImage}`} alt={details.title} />\n            ) : (\n              <img\n                src={`${srcImgBase}${details.poster_path}`}\n                alt={details.title}\n              />\n            )}\n            <DivDetailsInfo>\n              <h2>\n                {details.title}{' '}\n                {details.release_date === '' ||\n                details.release_date === undefined\n                  ? '(No date)'\n                  : `(${details.release_date.slice(0, 4)})`}\n              </h2>\n              <p>User score: {Math.floor(details.vote_average * 10)}%</p>\n              <h3>Overview</h3>\n              <p>{details.overview}</p>\n              <h3>Genres</h3>\n              <p>\n                {details.genres.length === 0\n                  ? 'No genres'\n                  : `${details.genres.map(genre => genre.name).join(', ')}.`}\n              </p>\n            </DivDetailsInfo>\n          </DivDetailsCard>\n          <div>\n            <p>Additional information</p>\n            <ul>\n              <li>\n                <NavLink\n                  to={`/movies/${movieId}/cast`}\n                  state={{ from: backLinkHref }}\n                >\n                  Cast\n                </NavLink>\n              </li>\n              <li>\n                <NavLink\n                  to={`/movies/${movieId}/reviews`}\n                  state={{ from: backLinkHref }}\n                >\n                  Reviews\n                </NavLink>\n              </li>\n            </ul>\n            <Suspense fallback={<p>Loading...</p>}>\n              <Outlet />\n            </Suspense>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n\nMovieDetails.propTypes = {\n  detail: PropTypes.arrayOf(\n    PropTypes.shape({\n      poster_path: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n      release_date: PropTypes.string.isRequired,\n      vote_average: PropTypes.number.isRequired,\n      overview: PropTypes.string.isRequired,\n      genres: PropTypes.array.isRequired,\n    })\n  ),\n};\n","import axios from 'axios';\n\nconst baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '520faa847257d57af54017c37ef43fe0';\n//api.themoviedb.org/3/trending/all/day?api_key=<<api_key>>\nexport async function getTrending() {\n  try {\n    const resTrending = await axios.get(\n      `${baseURL}/trending/movie/day?api_key=${API_KEY}`\n    );\n    return await resTrending.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getBySearch(query) {\n  try {\n    const resSearch = await axios.get(\n      `${baseURL}/search/movie?api_key=${API_KEY}&page=1&include_adult=false&query=${query}`\n    );\n    return await resSearch.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieDetails(movieId) {\n  try {\n    const resMovieDetails = await axios.get(\n      `${baseURL}/movie/${movieId}?api_key=${API_KEY}`\n    );\n    return await resMovieDetails.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieCast(movieId) {\n  try {\n    const resMovieCast = await axios.get(\n      `${baseURL}/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return await resMovieCast.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getMovieReviews(movieId) {\n  try {\n    const resMovieReviews = await axios.get(\n      `${baseURL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return await resMovieReviews.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n}\n"],"names":["NavLinkStyled","styled","NavLink","DivDetailsCard","DivDetailsInfo","movieId","useParams","useState","details","setDetails","srcImgBase","location","useLocation","backLinkHref","state","from","useEffect","getMovieDetails","data","console","log","message","getDetailsById","to","poster_path","src","alt","title","release_date","undefined","slice","Math","floor","vote_average","overview","genres","length","map","genre","name","join","Suspense","fallback","baseURL","API_KEY","getTrending","axios","resTrending","results","getBySearch","query","resSearch","resMovieDetails","getMovieCast","resMovieCast","getMovieReviews","resMovieReviews"],"sourceRoot":""}